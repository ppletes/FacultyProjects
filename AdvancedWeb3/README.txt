_zadaca_3_1 se sastoji od:
1. EntityBean klasa kao veze prema tablicama iz baze podataka
2. Facade klasa za rad s EntityBean klasama. Kod određenih klasa potrebno je dodati metode koje će obavljati potrebne aktivnosti na povezanom EB.

_zadaca_3_2 se sastoji od:
1. SessionBean klasa kao dio provođenja poslovnih aktivnosti kao što su dohvat meteo podataka za aerodrom na bazi njegove GPS lokacije uz korištenje klase OWMKlijent za web servis OpenWeatherMap. Druga aktivnost je komunikacijski dio na bazi WebSocketa. Na poslužiteljevoj krajnjoj točki za WebSocket se po prijemu poruke s podacima o korisniku i aerodromu dodaje zapis u tablicu MYAIRPORTS. Nakon toga se svima povezanim na krajnju točku šalje poruka o ukupnom broju aerodroma za koje se preuzimaju podaci o letovima.

_zadaca_3_3 sastoji se od korisničkog dijela u kojem se mogu obaviti aktivnosti:
1. aktivnost (A1) se temelji na 3 hijerarhijski povezana prikaza: korisnici (P1), korisnikovi aerodromi (P2), dani preuzetih podataka za aerodom (P3). Rad se isključivo temelji na Ajax-u. Na početku samo je vidljiv P1. Izvršavanjem odabira na P1 otvara se P2 (ako je sakriven), a ako je vidljiv P3 on se sakriva. Izvršavanem odabira na P2 otvara se P3 (ako je sakriven). Prikazivanje i sakrivanje temelje se na primjeni CSS klasa koja sadrže potrebne osobine. P1 se temelji na odabiru korisnika iz popisa korisnika iz tablice KORISNICI. Može se koristiti padajući izbornik ili tablični prikaz. Kod izbornika nakon imena i prezimena treba biti u zagradi podatak o broju aerodroma koje prati taj korisnik. Kod tablice to je poseban stupac. Gumbom (posebnim kod izbornika ili u retku za korisnika) „Prikaži korisnikove aerodrome“ otvara se P2 tablični prikaz korisnikovih aerodroma na temelju filtriranih podataka iz tablice MYAIRPORTS. U svakom retku uz podatke o aerodromu postoje podaci o broju korisnika koji ga prate (MYAIRPORTS), broju dana za koje su preuzeti podaci o letovima s tog aerodroma (MYAIRPORTSLOG), broj preuzetih letova s tog aerodroma (AIRPLANES) i gumb „Prikaži datume“ za odabir aerodroma. Odabirom aerodroma otvara se P3 tablični prikaz s podacima o danima preuzimanja podataka (prethodno je bio sakriven). U svakom retku prikazan je podatak o danu preuzimanja u HR formatu dd.mm.gggg, vremenu preuzimanja u HR formatu dd.mm.gggg hh:mm:ss.mmm te gumb „Brisanje podataka“. Gumbom se briše zapis aerodroma s odabranim datumom (MYAIRPORTSLOG). Ispod tablice nalazi se gumb „Vrati se na početak“ kojim se sakrivaju prikazi P2 i P3.
2. aktivnost (A2) se temelji na 2 hijerarhijski povezana prikaza: korisnici (P1), filtrirani aerodromi (P2). Rad se temelji na Ajax-u i WebSocket-u. Na početku samo je vidljiv P1. Izvršavanjem odabira na P1 otvara se P2 (ako je sakriven). Prikazivanje i sakrivanje temelje se na primjeni CSS klasa koja sadrže potrebne osobine. P1 na vrhu stranice sadrži podatak o ukupnom broju aerodroma za koje se preuzimaju podaci o letovima i vrijeme zadnjeg osvježavanja podatka o broju aerodroma. Ti podaci se isključivo prikazuju temeljem WebSocket komunikacije. Slijedi odabir korisnika iz popisa korisnika iz tablice KORISNICI. Koristi se suprotna varijanta u odnosi na P1 u A1. Uz odabir korisnika nalazi se dio za filtriranje aerodroma na temelju naziva. On sadrži element za unos naziva i gumbi „Potraži JPQL“ i „Potraži CApi“. Svi gumbi otvaraju P2 tablični prikaz aerodroma na temelju filtriranih podataka iz tablice AIRPORTS. Razlika je u pozivu metode iz pripadajuće facade. Svaka metoda koristi svoj način definiranja upita. Jedna koristi JPQL, a druga Criteria API. U svakom retku uz podatke o aerodromu postoje podaci o trenutnoj temperaturi i vlazi (na temelju web servisa OpenWeatherMap) te gumb za odabir aerodroma. Odabirom aerodroma šelje se poruka (korisnik, aerodrom) putem WebSocket veze na poslužitelj.
